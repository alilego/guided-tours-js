// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  reviews       Review[]

  @@map("users")
}

model Tour {
  id            String    @id @default(cuid())
  title         String
  description   String
  price         Float
  duration      Int       // in hours
  maxGroupSize  Int
  difficulty    TourDifficulty
  location      String
  imageUrl      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  reviews       Review[]
  categories    TourCategory[]

  @@map("tours")
}

model Booking {
  id            String    @id @default(cuid())
  userId        String
  tourId        String
  date          DateTime
  numberOfPeople Int
  status        BookingStatus @default(PENDING)
  totalPrice    Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  tour          Tour      @relation(fields: [tourId], references: [id])

  @@map("bookings")
}

model Review {
  id            String    @id @default(cuid())
  rating        Int
  comment       String
  userId        String
  tourId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  tour          Tour      @relation(fields: [tourId], references: [id])

  @@map("reviews")
}

enum UserRole {
  USER
  ADMIN
  GUIDE
}

enum TourDifficulty {
  EASY
  MODERATE
  DIFFICULT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TourCategory {
  CULTURAL
  HISTORICAL
  NATURE
  ADVENTURE
  FOOD
  SHOPPING
  NIGHTLIFE
  RELIGIOUS
}
