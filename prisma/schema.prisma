generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("emailVerified")
  image         String?
  role          String    @default("USER")
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  bookings      Booking[]
  reviews       Review[]
  sessions      Session[]
  createdTours  Tour[]    @relation("CreatedTours")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tour {
  id              String    @id @default(cuid())
  title           String
  description     String
  price           Float
  duration        Float
  imageUrl        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  date            DateTime
  maxParticipants Int
  creatorId       String
  bookings        Booking[]
  reviews         Review[]
  creator         User      @relation("CreatedTours", fields: [creatorId], references: [id])

  @@index([creatorId])
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  tourId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tour      Tour     @relation(fields: [tourId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([tourId])
  @@index([userId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String
  userId     String
  tourId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewerId String?  
  tour       Tour     @relation(fields: [tourId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  GUIDE
}

enum TourDifficulty {
  EASY
  MODERATE
  DIFFICULT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TourCategory {
  CULTURAL
  HISTORICAL
  NATURE
  ADVENTURE
  FOOD
  SHOPPING
  NIGHTLIFE
  RELIGIOUS
}
